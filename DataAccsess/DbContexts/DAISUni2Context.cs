// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using DataAccsess.Entities;

namespace DataAccsess.DbContexts
{
    public partial class DAISUni2Context : DbContext
    {
        public DAISUni2Context()
        {
        }

        public DAISUni2Context(DbContextOptions<DAISUni2Context> options)
            : base(options)
        {
        }

        public virtual DbSet<Answer> Answers { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Material> Materials { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<StudentsCourse> StudentsCourses { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public virtual DbSet<TeachersCourse> TeachersCourses { get; set; }
        public virtual DbSet<Test> Tests { get; set; }
        public virtual DbSet<TestResult> TestResults { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UsersRole> UsersRoles { get; set; }
        public virtual DbSet<Vote> Votes { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
        
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Answer>(entity =>
            {
                entity.Property(e => e.AnswersText).IsFixedLength();

                entity.HasOne(d => d.Questions)
                    .WithMany(p => p.Answers)
                    .HasForeignKey(d => d.QuestionsId)
                    .HasConstraintName("FK_Answers_Questions");
            });

            modelBuilder.Entity<Course>(entity =>
            {
                entity.Property(e => e.CreatedOn).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Teachers)
                    .WithMany(p => p.Courses)
                    .HasForeignKey(d => d.TeachersId)
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity<Module>(entity =>
            {
                entity.Property(e => e.CreatedOn).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Courses)
                    .WithMany(p => p.Modules)
                    .HasForeignKey(d => d.CoursesId)
                    .OnDelete(DeleteBehavior.Cascade);
            });

            modelBuilder.Entity<Question>(entity =>
            {
                entity.HasOne(d => d.Tests)
                    .WithMany(p => p.Questions)
                    .HasForeignKey(d => d.TestsId)
                    .HasConstraintName("FK_Questions_Tests");
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.Property(e => e.CreatedOn).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Users)
                    .WithMany(p => p.Students)
                    .HasForeignKey(d => d.UsersId)
                    .HasConstraintName("FK_Students_Users");
            });

            modelBuilder.Entity<StudentsCourse>(entity =>
            {
                entity.HasKey(e => new { e.StudentsId, e.CoursesId });
            });

            modelBuilder.Entity<Teacher>(entity =>
            {
                entity.Property(e => e.CreatedOn).HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.Users)
                    .WithMany(p => p.Teachers)
                    .HasForeignKey(d => d.UsersId)
                    .HasConstraintName("FK_Teachers_Users");
            });

            modelBuilder.Entity<TeachersCourse>(entity =>
            {
                entity.HasKey(e => new { e.TeachersId, e.CoursesId });

                entity.HasOne(d => d.Teachers)
                    .WithMany(p => p.TeachersCourses)
                    .HasForeignKey(d => d.TeachersId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<Test>(entity =>
            {
                entity.HasOne(d => d.Courses)
                    .WithMany(p => p.Tests)
                    .HasForeignKey(d => d.CoursesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tests_Courses");
            });

            modelBuilder.Entity<TestResult>(entity =>
            {
                entity.HasOne(d => d.Students)
                    .WithMany(p => p.TestResults)
                    .HasForeignKey(d => d.StudentsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TestResults_Students");

                entity.HasOne(d => d.Tests)
                    .WithMany(p => p.TestResults)
                    .HasForeignKey(d => d.TestsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TestResults_Tests");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedOn).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<UsersRole>(entity =>
            {
                entity.HasOne(d => d.Roles)
                    .WithMany()
                    .HasForeignKey(d => d.RolesId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsersRoles_Roles");

                entity.HasOne(d => d.Users)
                    .WithMany()
                    .HasForeignKey(d => d.UsersId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsersRoles_Users");
            });

            modelBuilder.Entity<Vote>(entity =>
            {
                entity.Property(e => e.CreatedOn).HasDefaultValueSql("(getdate())");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}